<script lang="ts">
import Vue from "vue";

import Radio from "@/components/registration/Radio.vue";
import FormInput from "@/components/registration/FormInput.vue";
import Checkbox from "@/components/registration/Checkbox.vue";
import Textbox from "@/components/registration/Textbox.vue";
import FormBlock from "@/components/registration/FormBlock.vue";
import FormLabel from "@/components/registration/FormLabel.vue";
import FormLabelSub from "@/components/registration/FormLabelSub.vue";

import FormError from "@/components/registration/FormError.vue";

import MemberBlock from "@/components/registration/MemberBlock.vue";
import TNCModal from "@/components/TNCModal.vue";
import RulesModal from "@/components/RulesModal.vue";
import ConfirmationModal from "@/components/ConfirmationModal.vue";

import validateFilledMixin from "@/mixins/validateFilledMixin";
import validateAgeMixin from "@/mixins/validateAgeMixin";
import validateEmailMixin from "@/mixins/validateEmailMixin";
import openModalMixin from "@/mixins/openModalMixin";

import { FormField, AgeFormField, EmailFormField, Member } from "@/interfaces";

export default Vue.extend({
  name: "registration-form",
  components: {
    Radio,
    FormInput,
    Checkbox,
    Textbox,
    FormBlock,
    FormLabel,
    FormLabelSub,
    FormError,
    MemberBlock,
    TNCModal,
    RulesModal,
    ConfirmationModal
  },
  data() {
    return {
      page: "1",
      removeCandidateID: "",
      removeCandidatePos: null,
      format: { value: "" } as FormField,
      individualNeedGroup: { value: "", error: "" } as FormField,
      individualName: { value: "", error: "" } as FormField,
      individualDob: { value: "", error: "", success: false } as AgeFormField,
      individualEmail: {
        value: "",
        error: "",
        success: false
      } as EmailFormField,
      individualOrg: { value: "", error: "" } as FormField,
      individualShirt: { value: "", error: "" } as FormField,
      individualDiet: { value: "" } as FormField,
      individualTeamName: { value: "", error: "" } as FormField,
      groupTeamName: { value: "", error: "" } as FormField,
      individualOthers: { value: "" } as FormField,
      groupOthers: { value: "" } as FormField,
      individualConfirm: { value: "", error: "" } as FormField,
      groupConfirm: { value: "", error: "" } as FormField,
      members: [
        {
          id: "one",
          taken: false,
          name: { value: "", error: "" },
          dob: { value: "", error: "", success: false },
          email: { value: "", error: "", success: false },
          org: { value: "", error: "" },
          shirt: { value: "", error: "" },
          diet: { value: "" }
        },
        {
          id: "two",
          taken: false,
          name: { value: "", error: "" },
          dob: { value: "", error: "", success: false },
          email: { value: "", error: "", success: false },
          org: { value: "", error: "" },
          shirt: { value: "", error: "" },
          diet: { value: "" }
        },
        {
          id: "three",
          taken: false,
          name: { value: "", error: "" },
          dob: { value: "", error: "", success: false },
          email: { value: "", error: "", success: false },
          org: { value: "", error: "" },
          shirt: { value: "", error: "" },
          diet: { value: "" }
        },
        {
          id: "four",
          taken: false,
          name: { value: "", error: "" },
          dob: { value: "", error: "", success: false },
          email: { value: "", error: "", success: false },
          org: { value: "", error: "" },
          shirt: { value: "", error: "" },
          diet: { value: "" }
        }
      ] as Array<Member>,
      membersMemory: [] as Array<Member>,
      submissionErrorMsg: ""
    };
  },
  mixins: [
    validateFilledMixin,
    validateAgeMixin,
    validateEmailMixin,
    openModalMixin
  ],
  methods: {
    informFormTouched(): void {
      window.formTouched = true;
    },
    informIsSubmittingForm(): void {
      window.isSubmittingForm = true;
    },
    validateAll(): string {
      let testString = "";
      let validationConclusion = "";
      if (this.format.value === "Individual") {
        testString = this.validateFilled(this.individualNeedGroup);
        testString = this.validateFilled(this.individualName);
        testString = this.validateFilled(this.individualOrg);
        testString = this.validateFilled(this.individualShirt);
        testString = this.validateFilled(this.individualConfirm);

        if (!this.validateFilled(this.individualDob)) {
          testString = this.validateAge(this.individualDob);
        } else {
          testString = "invalid";
        }
        if (!this.validateFilled(this.individualEmail)) {
          testString = this.validateEmail(this.individualEmail);
        } else {
          testString = "invalid";
        }

        if (testString) {
          validationConclusion =
            "There are some incomplete fields or invalid responses.";
        }
      } else if (this.format.value === "Group") {
        if (this.membersMemory.length >= 2) {
          testString = this.validateFilled(this.groupTeamName);
          testString = this.validateFilled(this.groupConfirm);

          this.membersMemory.forEach(member => {
            testString = this.validateFilled(member.name);
            testString = this.validateFilled(member.org);
            testString = this.validateFilled(member.shirt);

            if (!this.validateFilled(member.dob)) {
              testString = this.validateAge(member.dob);
            } else {
              testString = "invalid";
            }
            if (!this.validateFilled(member.email)) {
              testString = this.validateEmail(member.email);
            } else {
              testString = "invalid";
            }
          });

          if (testString) {
            validationConclusion =
              "There are some incomplete fields or invalid responses.";
          }
        } else {
          validationConclusion =
            "If you are signing up as a team, you need at least two members (Duhhh!).";
        }
      }
      this.submissionErrorMsg = validationConclusion;
      return validationConclusion;
    },
    checkSubmitConditions(): null | "" {
      if (this.format.value === "Individual") {
        if (this.individualNeedGroup.value === "True") {
          return this.individualName.value &&
            this.individualOrg.value &&
            this.individualShirt.value &&
            this.individualDob.success &&
            this.individualEmail.success &&
            this.individualConfirm.value
            ? null
            : "";
        } else if (this.individualNeedGroup.value === "False") {
          return this.individualName.value &&
            this.individualOrg.value &&
            this.individualTeamName.value &&
            this.individualShirt.value &&
            this.individualDob.success &&
            this.individualEmail.success &&
            this.individualConfirm.value
            ? null
            : "";
        } else {
          return "";
        }
      } else if (this.format.value === "Group") {
        if (
          this.groupTeamName.value &&
          this.groupConfirm.value &&
          this.membersMemory.length >= 2
        ) {
          return this.membersMemory
            .map(member => {
              return (
                member.name.value &&
                member.org.value &&
                member.shirt.value &&
                member.dob.success &&
                member.email.success
              );
            })
            .every(bool => bool)
            ? null
            : "";
        } else {
          return "";
        }
      } else {
        return "";
      }
    },
    goToPage(d: string): void {
      this.page = d;
    },
    openAccordion(a: string): void {
      let memberBlock = <HTMLElement>(
        document.querySelector(`#member-block-${a}`)
      );

      let memberBlockContent = <HTMLElement>(
        document.querySelector(`#member-block-content-${a}`)
      );
      let memberBlockTitle = <HTMLElement>(
        document.querySelector(`#member-block-title-${a}`)
      );
      let memberBlockTitleH2 = <HTMLElement>memberBlockTitle.children[0];
      let memberBlockTitleCancel = <SVGElement>memberBlockTitle.children[1];
      let memberBlockTitleArrow = <SVGElement>memberBlockTitle.children[2];
      let memberBlockTitleCancelPath = <SVGElement>(
        memberBlockTitleCancel.firstChild
      );
      let memberBlockTitleArrowPath = <SVGElement>(
        memberBlockTitleArrow.firstChild
      );

      if (
        memberBlockContent.style.maxHeight === "0px" ||
        !memberBlockContent.style.maxHeight
      ) {
        memberBlockContent.style.maxHeight = "2600px";
        memberBlock.style.border = "2px solid var(--color-accent)";
        memberBlockTitleH2.style.color = "var(--color-accent)";
        memberBlockTitleCancelPath.style.fill = "var(--color-accent)";
        memberBlockTitleArrowPath.style.fill = "var(--color-accent)";
      } else {
        memberBlockContent.style.maxHeight = "0px";
        setTimeout(() => {
          memberBlock.style.border = "2px solid var(--color-regular-text)";
          memberBlockTitleH2.style.color = "var(--color-regular-text)";
          memberBlockTitleCancelPath.style.fill = "var(--color-regular-text)";
          memberBlockTitleArrowPath.style.fill = "var(--color-regular-text)";
        }, 600);
      }
    },
    addMembers(): void {
      for (let i = 0; i < this.members.length; i++) {
        if (!this.members[i].taken) {
          this.members[i].taken = !this.members[i].taken;
          this.membersMemory.push(this.members[i]);
          break;
        }
      }
    },
    removeMember(id: string): void {
      for (let i = 0; i < this.members.length; i++) {
        if (this.members[i].id === id) {
          this.members[i].taken = !this.members[i].taken;

          this.members[i].name.value = "";
          this.members[i].name.error = "";

          this.members[i].dob.value = "";
          this.members[i].dob.error = "";
          this.members[i].dob.success = false;

          this.members[i].email.value = "";
          this.members[i].email.error = "";
          this.members[i].email.success = false;

          this.members[i].org.value = "";
          this.members[i].org.error = "";

          this.members[i].shirt.value = "";
          this.members[i].shirt.error = "";

          this.members[i].diet.value = "";
          this.members[i].diet.error = "";
          break;
        }
      }

      this.membersMemory = this.membersMemory.filter(
        member => member.id !== id
      );
    },
    submitForm(id: string): void {
      let form = <HTMLFormElement>document.getElementById(id);
      form.submit();
    }
  }
});
</script>